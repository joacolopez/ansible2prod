#!/usr/bin/env python3

# {{ ansible_managed }}
# ansibleguy.linux_networking

from json import loads as json_loads
from os import system as os_system
from os import listdir as os_listdir
from shutil import copyfile
from socket import socket, AF_INET, AF_INET6, SOCK_STREAM
import logging.handlers
from sys import exit as sys_exit
from time import sleep

VALIDATION = json_loads('{{ NW.validation | to_json }}')
BACKUP_PATH = '{{ NW_HC.network_script_dir }}/backup'
BACKUP_PATH_SEPARATOR = '{{ NW_HC.validation.backup_path_separator }}'

TIMEOUT = VALIDATION['test_timeout']
PING_COUNT = 2
PING_TIMEOUT = (TIMEOUT / PING_COUNT) * 1000

# initializing syslog logger
syslog = logging.getLogger(VALIDATION['syslog_id'])
syslog.setLevel(logging.INFO)
handler = logging.handlers.SysLogHandler(address='/dev/log')
syslog.addHandler(handler)


def _log(msg: str, level: int = 3):
    if VALIDATION['logging']:
        if level == 1:
            syslog.error(msg)

        elif level == 2:
            syslog.warning(msg)

        elif level == 3:
            syslog.info(msg)


def _error(msg):
    _log(f"Encountered the following error: '{msg}'", level=1)
    sys_exit(1)


def _parse_result(exit_code: int, test_type: str, test_name: str, test_target: (str, dict)) -> bool:
    msg = f"Test {test_type} '{test_name}' targeting \"{test_target}\""

    if exit_code == 0:
        _log(f'{msg} succeeded')
        return True

    _log(f'{msg} failed', level=2)
    return False


def _ping(target: str) -> bool:
    return os_system(f'fping -c {PING_COUNT} -t {PING_TIMEOUT} {target} > /dev/null 2>&1') == 0


def _port(target: dict) -> bool:
    ip_proto = AF_INET

    if target['host'].find(':') != -1:
        ip_proto = AF_INET6

    with socket(ip_proto, SOCK_STREAM) as s:
        s.settimeout(TIMEOUT)
        return s.connect_ex((target['host'], target['port'])) == 0


def _get_results() -> list:
    results = []

    for test_type, test_config in VALIDATION['test'].items():
        if not all(results):
            return results  # if a check failed - we have no need to run further checks

        test_functions = {'ping': _ping, 'port': _port}

        if test_type in test_functions:
            for test_name, test_target in test_config.items():
                results.append(
                    _parse_result(
                        exit_code=test_functions[test_type](test_target),
                        test_type=test_type,
                        test_name=test_name,
                        test_target=test_target,
                    )
                )

        else:
            _log(f"Provided unsupported test-type '{test_type}' via config! Ignoring it!", level=2)

    return results


def restore_config():
    os_system('cp -r /etc/network/interfaces* /tmp/')  # for troubleshooting purposes
    for config_backup in os_listdir(BACKUP_PATH):
        src = f"{BACKUP_PATH}/{config_backup}"
        dst = '/'.join(config_backup.split(BACKUP_PATH_SEPARATOR))

        copyfile(src=src, dst=dst)
        _log(f"Restored config-file '{dst}'", level=2)


def apply_config():
    _log("Applying new network config!", level=2)
    os_system('systemctl restart networking.service')
    # todo: I think we need to "1. stop networking, 2. flush ip's and so on, 3. re-start networking"
    #  so it is a 'cleaner' state


# back-up old network config is done by the ansible role
#   (when changed in check mode - copy to backup-dir before modifying)

def validate() -> bool:
    try_count = 0
    results = [True]

    while try_count < VALIDATION['retries']:
        try_count += 1

        results = _get_results()

        if all(results):
            break  # if checks are OK - we have no need to re-check them

        sleep(VALIDATION['retry_wait'])

    return all(results)


def main():
    # test connectivity via validation tests
    #   fail and notify user that the tests do not work

    if not validate():
        _error(
            'The validation process did not work BEFORE APPLYING CHANGES!\n'
            'You NEED TO FIX your tests so the validation works properly!'
        )

    # activate new network config
    apply_config()

    # test connectivity with new network-config via validation tests
    if not validate():
        # restore old config and re-activate it if the validation failed
        _log(
            'Network tests did not succeed after applying the new network-config! '
            'We will now revert the changes and re-apply the old config!',
            level=1
        )
        restore_config()
        apply_config()

        if validate():
            _log('The network-config restore was applied successfully!', level=2)

        else:
            _log(
                'The network-config restore seems to have failed! The Network tests did not succeed after the restore!',
                level=1
            )

        _error('Validation of the network-changes did FAIL!')

    else:
        _log('Network changes were applied successfully!')
        sys_exit(0)


if __name__ == '__main__':
    main()
