---
- name: Ensure Apache Storage Configuration
  hosts: webservers
  gather_facts: yes
  vars_files:
    - storage_vars.yml
  tasks:
    - name: Ensure lvm2 is installed
      apt:
        name: lvm2
        state: present
      become: yes

    - name: Ensure parted is installed
      apt:
        name: parted
        state: present
      become: yes

    - name: Ensure xfsprogs is installed
      apt:
        name: xfsprogs
        state: present
      become: yes

    - name: Unmount partitions on /dev/sdb if mounted
      mount:
        path: "{{ item }}"
        state: unmounted
      loop: "{{ ansible_mounts | selectattr('device', 'search', '^/dev/sdb') | map(attribute='mount_point') | list }}"
      ignore_errors: yes
      become: yes

    - name: Remove existing partitions on /dev/sdb
      command: "parted -s /dev/sdb rm 1"
      ignore_errors: yes
      become: yes

    - name: Create new partition on /dev/sdb
      parted:
        device: /dev/sdb
        state: present
        number: "{{ item.number }}"
        part_start: "{{ item.start }}"
        part_end: "{{ item.end }}"
      loop: "{{ partitions }}"
      become: yes

    - name: Ensure Volume Groups Exist
      lvg:
        vg: "{{ item.name }}"
        pvs: "{{ item.devices }}"
      loop: "{{ volume_groups }}"
      become: yes

    - name: Gather LVM facts
      command: "vgdisplay -v"
      register: lvm_facts
      changed_when: false
      become: yes

    - name: Create each Logical Volume (LV) if needed
      lvol:
        vg: "{{ item.vgroup }}"
        lv: "{{ item.name }}"
        size: "{{ item.size }}"
      loop: "{{ logical_volumes }}"
      when: "item.name not in lvm_facts.stdout"
      become: yes

    - name: Ensure XFS Filesystem exists on each LV
      filesystem:
        dev: "/dev/{{ item.vgroup }}/{{ item.name }}"
        fstype: xfs
      loop: "{{ logical_volumes }}"
      become: yes

    - name: Ensure the correct capacity for each LV
      lvol:
        vg: "{{ item.vgroup }}"
        lv: "{{ item.name }}"
        size: "{{ item.size }}"
        resizefs: yes
        force: yes
      loop: "{{ logical_volumes }}"
      become: yes

    - name: Each Logical Volume is mounted
      mount:
        path: "{{ item.mount_path }}"
        src: "/dev/{{ item.vgroup }}/{{ item.name }}"
        fstype: xfs
        opts: noatime
        state: mounted
      loop: "{{ logical_volumes }}"
      become: yes
